git branch --> listar ramas
git branch -r --> listar ramas remotas
git fetch --all -->  traer las ramas creadas desde github

git checkout -b nueva-rama-1 origin/nueva-rama-1

o

git switch nueva-rama-1 ( apartir de version 2.23)

----apuntes git----


git init --> para inicializar reositorio local
ls -a --> verlo orque esta ocultoo
git status --> ver como esta todo
git add (documento) --> pasa a estar staged
git commit -m "mensaje" --> commitear con mensaje
con git status vemos que no hay  nada para hacer commit

git log -->la cabeza apunta a la rama main,  tb sale el mensaje

modificamos el fichero y revisamos con status, vmaos las opciones

hacemos commit y vemos con log

desde visual podemon ver +- para ver en colores los cambios

git diff (primeros caracteres del id) --> para  lo msimo

OJO: cunaod cambiamos aparece en ventana changes, si satgeamos y cambiamos aparece staged changes y hay que decidir cual me quedo

primero por ejemplo commit el staged

----

.gitignore --> que no entren backups,etc

git log --oneline --> ver solo una linea

git tag  v1 o alpha para etiquetar

git checkout (id o tag) para irt a un commit anterior, la head no apunta a esto y se le pueden hacer commits o hacer otras ramas

git switch -c (nombrenuevarama) --> cambia con checkout

git restore --> restaura un cambios
git reset --> saca del staged
git revert HEAD --no-edit --> revertir commit
git reset --hard (id) --> volver a un punto del tiempo por ej al gitignore

modificar commit: git commit -a o --ammend (revisar) tb mirar cherrypick

------

git rebase -i (id) --> (el id se puede copiar con click)

el rebase es para borrar, cambiar orden, etc. En el editor estan als instrucciones

git rebase --abort para cancelar

por ejemplo squash para fusionar commits etc